package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VehicleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleAllPropertiesEquals(Vehicle expected, Vehicle actual) {
        assertVehicleAutoGeneratedPropertiesEquals(expected, actual);
        assertVehicleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleAllUpdatablePropertiesEquals(Vehicle expected, Vehicle actual) {
        assertVehicleUpdatableFieldsEquals(expected, actual);
        assertVehicleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleAutoGeneratedPropertiesEquals(Vehicle expected, Vehicle actual) {
        assertThat(expected)
            .as("Verify Vehicle auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleUpdatableFieldsEquals(Vehicle expected, Vehicle actual) {
        assertThat(expected)
            .as("Verify Vehicle relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getRegNo()).as("check regNo").isEqualTo(actual.getRegNo()))
            .satisfies(e -> assertThat(e.getZone()).as("check zone").isEqualTo(actual.getZone()))
            .satisfies(e -> assertThat(e.getCategory()).as("check category").isEqualTo(actual.getCategory()))
            .satisfies(e -> assertThat(e.getSerialNo()).as("check serialNo").isEqualTo(actual.getSerialNo()))
            .satisfies(e -> assertThat(e.getVehicleNo()).as("check vehicleNo").isEqualTo(actual.getVehicleNo()))
            .satisfies(e -> assertThat(e.getChasisNo()).as("check chasisNo").isEqualTo(actual.getChasisNo()))
            .satisfies(e -> assertThat(e.getIsPersonal()).as("check isPersonal").isEqualTo(actual.getIsPersonal()))
            .satisfies(e -> assertThat(e.getIsBlackListed()).as("check isBlackListed").isEqualTo(actual.getIsBlackListed()))
            .satisfies(e -> assertThat(e.getLogStatus()).as("check logStatus").isEqualTo(actual.getLogStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleUpdatableRelationshipsEquals(Vehicle expected, Vehicle actual) {
        assertThat(expected)
            .as("Verify Vehicle relationships")
            .satisfies(e -> assertThat(e.getVehicleType()).as("check vehicleType").isEqualTo(actual.getVehicleType()));
    }
}
