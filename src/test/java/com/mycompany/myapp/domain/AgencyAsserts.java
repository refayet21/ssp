package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AgencyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgencyAllPropertiesEquals(Agency expected, Agency actual) {
        assertAgencyAutoGeneratedPropertiesEquals(expected, actual);
        assertAgencyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgencyAllUpdatablePropertiesEquals(Agency expected, Agency actual) {
        assertAgencyUpdatableFieldsEquals(expected, actual);
        assertAgencyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgencyAutoGeneratedPropertiesEquals(Agency expected, Agency actual) {
        assertThat(expected)
            .as("Verify Agency auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgencyUpdatableFieldsEquals(Agency expected, Agency actual) {
        assertThat(expected)
            .as("Verify Agency relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getShortName()).as("check shortName").isEqualTo(actual.getShortName()))
            .satisfies(e -> assertThat(e.getIsInternal()).as("check isInternal").isEqualTo(actual.getIsInternal()))
            .satisfies(e -> assertThat(e.getIsDummy()).as("check isDummy").isEqualTo(actual.getIsDummy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAgencyUpdatableRelationshipsEquals(Agency expected, Agency actual) {
        assertThat(expected)
            .as("Verify Agency relationships")
            .satisfies(e -> assertThat(e.getAgencyType()).as("check agencyType").isEqualTo(actual.getAgencyType()))
            .satisfies(e -> assertThat(e.getPassTypes()).as("check passTypes").isEqualTo(actual.getPassTypes()));
    }
}
