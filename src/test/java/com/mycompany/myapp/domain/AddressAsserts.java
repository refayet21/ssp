package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AddressAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAddressAllPropertiesEquals(Address expected, Address actual) {
        assertAddressAutoGeneratedPropertiesEquals(expected, actual);
        assertAddressAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAddressAllUpdatablePropertiesEquals(Address expected, Address actual) {
        assertAddressUpdatableFieldsEquals(expected, actual);
        assertAddressUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAddressAutoGeneratedPropertiesEquals(Address expected, Address actual) {
        assertThat(expected)
            .as("Verify Address auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAddressUpdatableFieldsEquals(Address expected, Address actual) {
        assertThat(expected)
            .as("Verify Address relevant properties")
            .satisfies(e -> assertThat(e.getAddressLineOne()).as("check addressLineOne").isEqualTo(actual.getAddressLineOne()))
            .satisfies(e -> assertThat(e.getAddressLineTwo()).as("check addressLineTwo").isEqualTo(actual.getAddressLineTwo()))
            .satisfies(e -> assertThat(e.getAddressLineThree()).as("check addressLineThree").isEqualTo(actual.getAddressLineThree()))
            .satisfies(e -> assertThat(e.getAddressType()).as("check addressType").isEqualTo(actual.getAddressType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAddressUpdatableRelationshipsEquals(Address expected, Address actual) {
        assertThat(expected)
            .as("Verify Address relationships")
            .satisfies(e -> assertThat(e.getCityCorpPoura()).as("check cityCorpPoura").isEqualTo(actual.getCityCorpPoura()))
            .satisfies(e -> assertThat(e.getUnion()).as("check union").isEqualTo(actual.getUnion()))
            .satisfies(e -> assertThat(e.getPostOffice()).as("check postOffice").isEqualTo(actual.getPostOffice()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getPerson()).as("check person").isEqualTo(actual.getPerson()))
            .satisfies(e -> assertThat(e.getAgency()).as("check agency").isEqualTo(actual.getAgency()));
    }
}
