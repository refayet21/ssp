package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PassTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPassTypeAllPropertiesEquals(PassType expected, PassType actual) {
        assertPassTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertPassTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPassTypeAllUpdatablePropertiesEquals(PassType expected, PassType actual) {
        assertPassTypeUpdatableFieldsEquals(expected, actual);
        assertPassTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPassTypeAutoGeneratedPropertiesEquals(PassType expected, PassType actual) {
        assertThat(expected)
            .as("Verify PassType auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPassTypeUpdatableFieldsEquals(PassType expected, PassType actual) {
        assertThat(expected)
            .as("Verify PassType relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getShortName()).as("check shortName").isEqualTo(actual.getShortName()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getPrintedName()).as("check printedName").isEqualTo(actual.getPrintedName()))
            .satisfies(e -> assertThat(e.getIssueFee()).as("check issueFee").isEqualTo(actual.getIssueFee()))
            .satisfies(e -> assertThat(e.getRenewFee()).as("check renewFee").isEqualTo(actual.getRenewFee()))
            .satisfies(e -> assertThat(e.getCancelFee()).as("check cancelFee").isEqualTo(actual.getCancelFee()))
            .satisfies(e -> assertThat(e.getMinimumDuration()).as("check minimumDuration").isEqualTo(actual.getMinimumDuration()))
            .satisfies(e -> assertThat(e.getMaximumDuration()).as("check maximumDuration").isEqualTo(actual.getMaximumDuration()))
            .satisfies(e -> assertThat(e.getIssueChannelType()).as("check issueChannelType").isEqualTo(actual.getIssueChannelType()))
            .satisfies(e -> assertThat(e.getTaxCode()).as("check taxCode").isEqualTo(actual.getTaxCode()))
            .satisfies(e -> assertThat(e.getPassMediaType()).as("check passMediaType").isEqualTo(actual.getPassMediaType()))
            .satisfies(e -> assertThat(e.getPassUserType()).as("check passUserType").isEqualTo(actual.getPassUserType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPassTypeUpdatableRelationshipsEquals(PassType expected, PassType actual) {
        assertThat(expected)
            .as("Verify PassType relationships")
            .satisfies(e -> assertThat(e.getAgencies()).as("check agencies").isEqualTo(actual.getAgencies()));
    }
}
