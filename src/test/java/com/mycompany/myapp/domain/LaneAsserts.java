package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LaneAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLaneAllPropertiesEquals(Lane expected, Lane actual) {
        assertLaneAutoGeneratedPropertiesEquals(expected, actual);
        assertLaneAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLaneAllUpdatablePropertiesEquals(Lane expected, Lane actual) {
        assertLaneUpdatableFieldsEquals(expected, actual);
        assertLaneUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLaneAutoGeneratedPropertiesEquals(Lane expected, Lane actual) {
        assertThat(expected)
            .as("Verify Lane auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLaneUpdatableFieldsEquals(Lane expected, Lane actual) {
        assertThat(expected)
            .as("Verify Lane relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getShortName()).as("check shortName").isEqualTo(actual.getShortName()))
            .satisfies(e -> assertThat(e.getDirection()).as("check direction").isEqualTo(actual.getDirection()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLaneUpdatableRelationshipsEquals(Lane expected, Lane actual) {
        assertThat(expected)
            .as("Verify Lane relationships")
            .satisfies(e -> assertThat(e.getGate()).as("check gate").isEqualTo(actual.getGate()))
            .satisfies(e -> assertThat(e.getAccessProfiles()).as("check accessProfiles").isEqualTo(actual.getAccessProfiles()));
    }
}
